from flask import render_template, request
from app import app, db, bot
from models import *

from telebot import types
from config import token, web_site

from datetime import datetime
from sqlalchemy import and_

from app import service
from config import spreadsheet_id
import time

### Front page ###
@app.route('/')
def index():
    ''' Connecting with bot '''
    bot.remove_webhook()
    bot.set_webhook(url='{}{}'.format(web_site, token))

    return render_template('index.html')
### Front page ###

### 404 ###
@app.errorhandler(404)
def page_not_found(e):
    return render_template('404.html'), 404
### 404 ###



### TELEGRAM VIEWS ###

### Telegram webhook ###
@app.route('/{}'.format(token), methods=['POST'])
def webhook():
    # bot.process_new_updates([types.Update.de_json(request.stream.read().decode('utf-8'))])
    bot.process_new_updates([types.Update.de_json(request.data.decode('utf-8'))])
    return 'ok', 200
### Telegram webhook ###

### /start command ###
@bot.message_handler(commands=['start'])
def start(message):
    user = Users.query.filter_by(chat_id=message.from_user.id).first()
    if (user is None):
        user = Users(chat_id=message.chat.id, \
                    username=message.chat.username, \
                    first_name=message.chat.first_name, \
                    last_name=message.chat.last_name, \
                    status='User')
        db.session.add(user)
        db.session.commit()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ß—Ç–æ —Å–µ–π—á–∞—Å?')
    markup.row('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–Ø –Ω–µ —Ä–∞—Å—Å–µ–ª–µ–Ω')
    markup.row('–ì–¥–µ –ø–æ–∫—É—à–∞—Ç—å?', '–ö—Ç–æ –Ω–∞ TTH?')
    markup.row('–í –∫–∞–∫–æ–π —è –≥—Ä—É–ø–ø–µ?')
    if (user.status == 'User'):
        pass
    elif (user.status == 'Admin'):
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å', '–û–±–Ω–æ–≤–∏—Ç—å')
        markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    elif (user.status == 'Questions'):
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å')
    elif (user.status == 'Memeses'):
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º')
    elif (user.status == 'VIP'):
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')

    bot.send_message(message.chat.id, \
                    '<b>{}, –∂–µ–ª–∞–µ–º —Ö–æ—Ä–æ—à–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ TTH üòä</b>'.format( \
                                                                message.chat.first_name), \
                    parse_mode='HTML', \
                    reply_markup=markup)
### /start command ###

### /start_keyboard command ###
@bot.message_handler(commands=['start_keyboard'])
def start_keyboard(message):
    user = Users.query.filter_by(chat_id=message.from_user.id).first()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ß—Ç–æ —Å–µ–π—á–∞—Å?')
    markup.row('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–Ø –Ω–µ —Ä–∞—Å—Å–µ–ª–µ–Ω')
    markup.row('–ì–¥–µ –ø–æ–∫—É—à–∞—Ç—å?', '–ö—Ç–æ –Ω–∞ TTH?')
    markup.row('–í –∫–∞–∫–æ–π —è –≥—Ä—É–ø–ø–µ?')
    if (user.status == 'User'):
        pass
    elif (user.status == 'Admin'):
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å', '–û–±–Ω–æ–≤–∏—Ç—å')
        markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    elif (user.status == 'Questions'):
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å')
    elif (user.status == 'Memeses'):
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º')
    elif (user.status == 'VIP'):
        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')

    bot.send_message(message.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–∫–ª—é—á–µ–Ω–∞', reply_markup=markup)
### /start_keyboard command ###

### /stop_keyboard command ###
@bot.message_handler(commands=['stop_keyboard'])
def stop_keyboard(message):
    remove_markup = types.ReplyKeyboardRemove()

    bot.send_message(message.chat.id, '–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞', reply_markup=remove_markup)
### /stop_keyboard command ###

### /git command ###
@bot.message_handler(commands=['git'])
def git(message):
    buttons = types.InlineKeyboardMarkup()
    url_button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ', \
                                        url='https://github.com/KonstantinShvyryaev/tth-2018-bot')
    buttons.add(url_button)
    bot.send_message(message.chat.id, \
                    '<b>–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ–¥ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞?</b>', \
                    parse_mode='HTML', \
                    reply_markup=buttons)
### /git command ###

# Google: create array when app starting
start_range_ = 'A2:AD2'
start_request = service.spreadsheets().values().get(spreadsheetId=spreadsheet_id, \
                                            range=start_range_, \
                                            majorDimension='ROWS')
start_response = start_request.execute()
start_conf_info = start_response['values'][0]
conf_info_temp = [start_conf_info, time.time()]


start_small_group_range_ = 'C3:G1000'
start_small_group_request = service.spreadsheets().values().get(spreadsheetId=spreadsheet_id, \
                                                            range=start_small_group_range_, \
                                                            majorDimension='ROWS')
start_small_group_response = start_small_group_request.execute()
if 'values' in start_small_group_response:
    start_small_group_val = start_small_group_response['values']
    small_group_temp = [start_small_group_val, time.time()]
# Google: create array when app starting

### Text Handler ###
@bot.message_handler(content_types=['text'])
def text(message):
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    if (message.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ'):
        bot.send_message(message.chat.id, timetable(), parse_mode='HTML')
    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ

    # –ß—Ç–æ —Å–µ–π—á–∞—Å?
    elif (message.text == '–ß—Ç–æ —Å–µ–π—á–∞—Å?'):
        bot.send_message(message.chat.id, events_now(), parse_mode='HTML')
    # –ß—Ç–æ —Å–µ–π—á–∞—Å?

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    elif (message.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'):
        buttons = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', \
                                                url='https://goo.gl/ae2xLR')
        buttons.add(url_button)

        bot.send_message(message.chat.id, \
                '<b>–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ—Å—Å—ã–ª–∫–µ üëá</b>', \
                parse_mode='HTML', \
                reply_markup=buttons)
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    
    # –Ø –Ω–µ —Ä–∞—Å—Å–µ–ª–µ–Ω
    elif (message.text == '–Ø –Ω–µ —Ä–∞—Å—Å–µ–ª–µ–Ω'):
        buttons = types.InlineKeyboardMarkup()
        res_send = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', \
                                            callback_data='res_send')
        res_break = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', \
                                            callback_data='res_break')
        buttons.add(res_send, res_break)

        bot.send_message(message.chat.id, \
                        '''<b>–ú—ã –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É \
–∑–∞ —Ä–∞—Å—Å–µ–ª–µ–Ω–∏–µ –∏ –æ–Ω –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç üòâ</b>''', \
                        parse_mode='HTML', \
                        reply_markup=buttons)
    # –Ø –Ω–µ —Ä–∞—Å—Å–µ–ª–µ–Ω

    # –ì–¥–µ –ø–æ–∫—É—à–∞—Ç—å?
    elif (message.text == '–ì–¥–µ –ø–æ–∫—É—à–∞—Ç—å?'):
        buttons = types.InlineKeyboardMarkup()
        url_button = types.InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ', \
                                                url='https://goo.gl/FsBvF2')
        buttons.add(url_button)
        bot.send_message(message.chat.id, \
                        '<b>–ú—ã –ø–æ–¥–æ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å üòâ</b>', \
                        parse_mode='HTML', \
                        reply_markup=buttons)
    # –ì–¥–µ –ø–æ–∫—É—à–∞—Ç—å?

    # –ö—Ç–æ –Ω–∞ TTH?
    elif (message.text == '–ö—Ç–æ –Ω–∞ TTH?'):
        global conf_info_temp
        cur_time = time.time()
        diff = cur_time - conf_info_temp[1]

        if diff > 60:
            conf_info_temp[1] = time.time()

            range_ = 'A2:AD2'
            request = service.spreadsheets().values().get(spreadsheetId=spreadsheet_id, \
                                                        range=range_, \
                                                        majorDimension='ROWS')
            response = request.execute()
            conf_info = response['values'][0]
            conf_info_temp[0] = conf_info

        users = Users.query.all()
        bot.send_message(message.chat.id, \
                        '<b>üí° –ù–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ üí°</b>\nüöó –ü—Ä–∏–µ—Ö–∞–ª–∏: {}\n\
‚öΩ –ú–ª–∞–¥—à–µ 14 –ª–µ—Ç: {}\nüéÆ –û—Ç 14 –¥–æ 18 –ª–µ—Ç: {}\nüçÄ –°—Ç–∞—Ä—à–µ 18 –ª–µ—Ç: {}\n\
üë± –ü–∞—Ä–Ω–µ–π: {}\nüë© –î–µ–≤—É—à–µ–∫: {}'.format(conf_info_temp[0][1], \
                                conf_info_temp[0][25], \
                                conf_info_temp[0][26], \
                                conf_info_temp[0][27], \
                                conf_info_temp[0][28], \
                                conf_info_temp[0][29]), \
                        parse_mode='HTML')
    # –ö—Ç–æ –Ω–∞ TTH?

    # –í –∫–∞–∫–æ–π —è –≥—Ä—É–ø–ø–µ?
    elif (message.text == '–í –∫–∞–∫–æ–π —è –≥—Ä—É–ø–ø–µ?'):
        global small_group_temp

        try:
            small_group_temp
        except NameError:
            bot.send_message(message.chat.id, \
                            '<b>–ú—ã –µ—â–µ –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –º–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã ü§î</b>', \
                            parse_mode='HTML')
            return

        cur_time = time.time()
        diff = cur_time - small_group_temp[1]

        # grp_processing
        def grp_processing(message):
            full_name = message.text.split()
            size = len(full_name)
            if size != 3:
                if (size == 1):
                    bot.send_message(message.chat.id, \
                            '<b>–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ {} —Å–ª–æ–≤–æ üôÑ</b>'.format(size), \
                            parse_mode='HTML')
                elif ((size == 2) or (size == 4)):
                    bot.send_message(message.chat.id, \
                            '<b>–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ {} —Å–ª–æ–≤–∞ üôÑ</b>'.format(size), \
                            parse_mode='HTML')
                else:
                    bot.send_message(message.chat.id, \
                            '<b>–û—à–∏–±–∫–∞! –í—ã –≤–≤–µ–ª–∏ {} —Å–ª–æ–≤ üôÑ</b>'.format(size), \
                            parse_mode='HTML')
                return

            if full_name[0] == '–ú–µ–º–µ—Å–æ–≤' \
                and full_name[1] == '–£–≥–∞–Ω–¥–∏–π' \
                    and full_name[2] == '–ù–∞–∫–ª—Å–æ–≤–∏—á':
                bot.send_message(message.chat.id, \
                            '<b>–Ø –∑–Ω–∞–ª, —á—Ç–æ —Ö–æ—Ç—å –æ–¥–∏–Ω —á–µ–ª–æ–≤–µ–∫ —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ üòÇ\n\
–ò –≤ –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å üéâ –Ω–∏—á–µ–≥–æ üéâ</b>', \
                            parse_mode='HTML')
                return

            is_distributed = False
            for i in small_group_temp[0]:
                if i[0] != '':
                    if (i[2] == full_name[0] and i[3] == full_name[1] and i[4] == full_name[2]):
                        if i[0] == '2':
                            bot.send_message(message.chat.id, \
                                '<b>–í—ã –≤–æ {} –≥—Ä—É–ø–ø–µ üòä</b>'.format(i[0]), \
                                parse_mode='HTML')
                        else:
                            bot.send_message(message.chat.id, \
                                '<b>–í—ã –≤ {} –≥—Ä—É–ø–ø–µ üòä</b>'.format(i[0]), \
                                parse_mode='HTML')

                        buttons = types.InlineKeyboardMarkup()
                        grp_save = types.InlineKeyboardButton(text='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å', \
                                                            callback_data='grp_save')
                        grp_break = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', \
                                                            callback_data='grp_break')
                        buttons.add(grp_save, grp_break)

                        bot.send_message(message.chat.id, \
                                '<b>{} {} {}\n–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤–∞—à–∏ –§–ò–û? üôÉ \
–í–∞–º –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–¥–µ—Ç—Å—è –∏—Ö –≤–≤–æ–¥–∏—Ç—å üòâ</b>'.format(full_name[0], \
                                                    full_name[1], \
                                                        full_name[2]), \
                                parse_mode='HTML', \
                                reply_markup=buttons)
                        return
                    
                    is_distributed = True

            if is_distributed:
                bot.send_message(message.chat.id, \
                                '<b>–ú—ã –µ—â–µ –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤–∞—Å –≤ –º–∞–ª—É—é –≥—Ä—É–ø–ø—É, \
–ª–∏–±–æ –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤–∞—à–∏ –§–ò–û ü§î</b>\n<i>–õ–∏–±–æ –º—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤–∞—à–∏ –§–ò–û</i> üòâ', \
                                parse_mode='HTML')
            else:
                bot.send_message(message.chat.id, \
                                '<b>–ú—ã –µ—â–µ –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –º–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã ü§î</b>', \
                                parse_mode='HTML')
        # grp_processing

        if diff > 120:
            small_group_temp[1] = time.time()

            range_ = 'C3:G1000'
            request = service.spreadsheets().values().get(spreadsheetId=spreadsheet_id, \
                                                        range=range_, \
                                                        majorDimension='ROWS')
            response = request.execute()
            if 'values' in response:
                small_group_val = response['values']
                small_group_temp[0] = small_group_val

        user = Users.query.filter_by(chat_id=message.from_user.id).first()
        if user.grp_last_name is not None:
            return grp_db_processing(message, \
                                    user.grp_last_name, \
                                    user.grp_first_name, \
                                    user.grp_second_name)

        msg = bot.send_message(message.chat.id, \
                            '<b>–í–≤–µ–¥–∏—Ç–µ —Ñ–∞–º–∏–ª–∏—é, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª üòå</b>\n\
<i>(–ü—Ä–∏–º–µ—Ä: –ú–µ–º–µ—Å–æ–≤ –£–≥–∞–Ω–¥–∏–π –ù–∞–∫–ª—Å–æ–≤–∏—á)</i>', \
                            parse_mode='HTML')
        bot.register_next_step_handler(msg, grp_processing)
    # –í –∫–∞–∫–æ–π —è –≥—Ä—É–ø–ø–µ?

    # –û–±–Ω–æ–≤–∏—Ç—å
    elif (message.text == '–û–±–Ω–æ–≤–∏—Ç—å'):
        user = Users.query.filter_by(chat_id=message.from_user.id).first()
        if(user.status == 'Admin'):
            buttons = types.InlineKeyboardMarkup()
            upd_success = types.InlineKeyboardButton(text='–û–±–Ω–æ–≤–∏—Ç—å', \
                                                    callback_data='upd_success')
            update_break = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', \
                                                    callback_data='update_break')
            buttons.add(upd_success, update_break)

            bot.send_message(message.chat.id, \
                            '<b>–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?</b>', \
                            parse_mode="HTML", \
                            reply_markup=buttons)
    # –û–±–Ω–æ–≤–∏—Ç—å

    # –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif (message.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'):
        user = Users.query.filter_by(chat_id=message.from_user.id).first()
        if(user.status == 'Admin'):
            msg = bot.send_message(message.chat.id, \
                            '<b>–°—Ñ–æ—Ä–º–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ —Ñ–æ—Ä–º–∞—Ç–µ:</b> <i>username new_status</i>', \
                            parse_mode='HTML')
            bot.register_next_step_handler(msg, change_status_for_user)
    # –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º
    elif (message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º'):
        # mem_processing
        def mem_processing(message):
            try:
                buttons = types.InlineKeyboardMarkup()
                mem_post = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', \
                                                    callback_data='mem_post')
                mem_post_anonymously = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', \
                                                    callback_data='mem_post_anonymously')
                mem_break = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', \
                                                    callback_data='mem_break')
                buttons.add(mem_post)
                buttons.add(mem_post_anonymously)
                buttons.add(mem_break)

                bot.send_message(message.chat.id, \
                                    '<b>–í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å üòä</b>', \
                                     parse_mode="HTML")

                max_quality = len(message.photo) - 1
                bot.send_message(message.chat.id, \
                                '<i>Memes by</i> @{}'.format(message.chat.username), \
                                parse_mode="HTML")
                bot.send_photo(message.chat.id, \
                                message.photo[max_quality].file_id, \
                                message.caption, \
                                reply_markup=buttons)
            except Exception as e:
                bot.send_message(message.chat.id, 'oooops')
        # mem_processing

        user = Users.query.filter_by(chat_id=message.from_user.id).first()
        if(user.status == 'Admin' or user.status == 'Memeses'):
            msg = bot.send_message(message.chat.id, '<b>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –º–µ–º üòå</b>', parse_mode='HTML')
            bot.register_next_step_handler(msg, mem_processing)
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    elif (message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'):
        # message_processing
        def message_processing(message):
            try:
                buttons = types.InlineKeyboardMarkup()
                message_post = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', \
                                                    callback_data='message_post')
                message_post_anonymously = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ', \
                                                    callback_data='message_post_anonymously')
                message_break = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', \
                                                    callback_data='message_break')
                buttons.add(message_post)
                buttons.add(message_post_anonymously)
                buttons.add(message_break)

                bot.send_message(message.chat.id, \
                                    '<b>–í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å üòä</b>', \
                                     parse_mode='HTML')
                bot.send_message(message.chat.id, \
                                '<i>Message by</i> @{}'.format(message.chat.username), \
                                parse_mode='HTML')
                bot.send_message(message.chat.id, \
                                '{}'.format(message.text), \
                                reply_markup=buttons)
            except Exception as e:
                bot.send_message(message.chat.id, 'oooops')
        # message_processing

        user = Users.query.filter_by(chat_id=message.from_user.id).first()
        if(user.status == 'Admin' or user.status == 'VIP'):
            msg = bot.send_message(message.chat.id, \
                                '<b>–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ üòå</b>', \
                                parse_mode='HTML')
            bot.register_next_step_handler(msg, message_processing)
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å
    elif (message.text == '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å'):
        # inter_pocessing
        def inter_processing(message):
            try:
                test_splt = message.text.split()
                url = test_splt[0]

                buttons = types.InlineKeyboardMarkup()
                url_button = types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', \
                                                        url=url)
                inter_post = types.InlineKeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', \
                                                        callback_data='inter_post')
                inter_break = types.InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', \
                                                        callback_data='inter_break')       
                buttons.add(url_button)
                buttons.add(inter_post, inter_break)

                bot.send_message(message.chat.id, \
                        '<b>–í–æ—Ç —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å(—Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –ø–æ–ª–µ –Ω–µ –±—É–¥–µ—Ç) üòä</b>', \
                        parse_mode='HTML')
                bot.send_message(message.chat.id, \
                                '{}\n<b>–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –æ–ø—Ä–æ—Å üòä\n\
–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å üëá</b>'.format(url), \
                                parse_mode='HTML', \
                                reply_markup=buttons)
            except Exception as e:
                bot.send_message(message.chat.id, 'oooops')
        # inter_pocessing

        user = Users.query.filter_by(chat_id=message.from_user.id).first()
        if(user.status == 'Admin' or user.status == 'Questions'):
            msg = bot.send_message(message.chat.id, \
                        '<b>–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—Ä–æ—Å üòå</b>', \
                        parse_mode='HTML')
            bot.register_next_step_handler(msg, inter_processing)
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å
### Text Handler ###

### Callback query handler ###
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:

        # res_send button
        if call.data == 'res_send':
            recipient_username = 'VitaVet'
            recipient = Users.query.filter_by(username=recipient_username).first()
            recipient_id = recipient.chat_id

            sender_username = call.message.chat.username
            if sender_username is None:
                bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text='<b>–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ username! \
–ú—ã –Ω–µ —Å–º–æ–∂–µ–º —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏ –±–µ–∑ —ç—Ç–æ–≥–æ üò¢</b>', \
                                parse_mode='HTML')
                return

            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text='<b>–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–º—É \
–∑–∞ —Ä–∞—Å—Å–µ–ª–µ–Ω–∏–µ, –≤–∞–º —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç—è—Ç üòä</b>', \
                                parse_mode='HTML')

            bot.send_message(recipient_id, \
                        '@{} <b>–Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Ä–∞—Å—Å–µ–ª–µ–Ω–∏–∏!</b>'.format(sender_username), \
                        parse_mode="HTML")
        # res_send button

        # res_break button
        elif call.data == 'res_break':
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text='<b>–ñ–µ–ª–∞–µ–º –æ—Ç–ª–∏—á–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è –Ω–∞ TTH üòä</b>', \
                                parse_mode='HTML')
        # res_break button

        # grp_save button
        elif call.data == 'grp_save':
            text_splt = call.message.text.split()

            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text='<b>–ì–æ—Ç–æ–≤–æ üòä</b>', \
                                parse_mode='HTML')

            user = Users.query.filter_by(chat_id=call.message.chat.id).first()
            user.grp_last_name = text_splt[0]
            user.grp_first_name = text_splt[1]
            user.grp_second_name = text_splt[2]
            db.session.commit()
        # grp_save button

        # grp_break button
        elif call.data == 'grp_break':
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text='<b>–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòâ</b>', \
                                parse_mode='HTML')
        # grp_break button

        # mem_post button
        elif call.data == 'mem_post':
            bot.delete_message(call.message.chat.id, call.message.message_id - 2)
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, 
                            '<b>–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üòä</b>', 
                            parse_mode='HTML')

            users = Users.query.all()
            max_quality = len(call.message.photo) - 1
            for user in users:
                try:
                    bot.send_message(user.chat_id, \
                                    '<i>Memes by</i> @{}'.format(call.message.chat.username), \
                                    parse_mode='HTML')
                    bot.send_photo(user.chat_id, \
                                call.message.photo[max_quality].file_id, \
                                call.message.caption)
                except Exception as e:
                    continue
        # mem_post button

        # mem_post_anonymously button
        elif call.data == 'mem_post_anonymously':
            bot.delete_message(call.message.chat.id, call.message.message_id - 2)
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, 
                            '<b>–ú–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üòä</b>', 
                            parse_mode='HTML')

            users = Users.query.all()
            max_quality = len(call.message.photo) - 1
            for user in users:
                try:
                    if (user.status == 'Admin') or (user.status == 'VIP'):
                        bot.send_message(user.chat_id, \
                                '<i>Anonymously by</i> @{}'.format(call.message.chat.username), \
                                parse_mode='HTML')
                    bot.send_photo(user.chat_id, \
                                call.message.photo[max_quality].file_id, \
                                call.message.caption)
                except Exception as e:
                    continue
        # mem_post_anonymously button

        # mem_break button
        elif call.data == 'mem_break':
            bot.delete_message(call.message.chat.id, call.message.message_id - 2)
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, 
                                '<b>–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòâ</b>', 
                                parse_mode='HTML')
        # mem_break button

        # message_post button
        elif call.data == 'message_post':
            bot.delete_message(call.message.chat.id, call.message.message_id - 2)
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text="<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üòä</b>", \
                                parse_mode='HTML')

            users = Users.query.all()
            for user in users:
                try:
                    bot.send_message(user.chat_id, \
                                '<i>Message by</i> @{}'.format(call.message.chat.username), \
                                parse_mode='HTML')
                    bot.send_message(user.chat_id, \
                                    '{}'.format(call.message.text), \
                                    parse_mode='HTML')
                except Exception as e:
                    continue
        # message_post button

        # message_post_anonymously button
        elif call.data == 'message_post_anonymously':
            bot.delete_message(call.message.chat.id, call.message.message_id - 2)
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text="<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üòä</b>", \
                                parse_mode='HTML')

            users = Users.query.all()
            for user in users:
                try:
                    if (user.status == 'Admin') or (user.status == 'VIP'):
                        bot.send_message(user.chat_id, \
                                '<i>Anonymously by</i> @{}'.format(call.message.chat.username), \
                                parse_mode='HTML')
                    bot.send_message(user.chat_id, \
                                    '{}'.format(call.message.text), \
                                    parse_mode='HTML')
                except Exception as e:
                    continue
        # message_post_anonymously button

        # message_break button
        elif call.data == 'message_break':
            bot.delete_message(call.message.chat.id, call.message.message_id - 2)
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text="<b>–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòâ</b>", \
                                parse_mode='HTML')
        # message_break button

        # inter_post button
        elif call.data == 'inter_post':
            text_splt = call.message.text.split()
            url = text_splt[0]

            buttons = types.InlineKeyboardMarkup()
            url_button = types.InlineKeyboardButton(text='–ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å', \
                                                    url=url)
            buttons.add(url_button)

            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text="<b>–û–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω üòä</b>", \
                                parse_mode='HTML')

            users = Users.query.all()
            for user in users:
                try:
                    bot.send_message(user.chat_id, \
                            '<b>–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å –æ–ø—Ä–æ—Å üòä\n\
–°–∫–æ—Ä–µ–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å üëá</b>', \
                            parse_mode='HTML', \
                            reply_markup=buttons)
                except Exception as e:
                    continue
        # inter_post button

        # inter_break button
        elif call.data == 'inter_break':
            bot.delete_message(call.message.chat.id, call.message.message_id - 1)
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text="<b>–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòâ</b>", \
                                parse_mode='HTML')
        # inter_break button


        # upd_success button
        elif call.data == 'upd_success':
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text="<b>–ì–æ—Ç–æ–≤–æ üòä</b>", \
                                parse_mode='HTML')

            users = Users.query.all()
            for user in users:
                try:
                    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                    markup.row('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ß—Ç–æ —Å–µ–π—á–∞—Å?')
                    markup.row('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '–Ø –Ω–µ —Ä–∞—Å—Å–µ–ª–µ–Ω')
                    markup.row('–ì–¥–µ –ø–æ–∫—É—à–∞—Ç—å?', '–ö—Ç–æ –Ω–∞ TTH?')
                    markup.row('–í –∫–∞–∫–æ–π —è –≥—Ä—É–ø–ø–µ?')
                    if (user.status == 'User'):
                        pass
                    elif (user.status == 'Admin'):
                        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')
                        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å', '–û–±–Ω–æ–≤–∏—Ç—å')
                        markup.row('–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
                    elif (user.status == 'Questions'):
                        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–ø—Ä–æ—Å')
                    elif (user.status == 'Memeses'):
                        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ–º')
                    elif (user.status == 'VIP'):
                        markup.row('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ')

                    bot.send_message(user.chat_id, \
                                    '<b>üí¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ üí¢</b>', \
                                    parse_mode='HTML', \
                                    reply_markup=markup)
                except Exception as e:
                    continue
        # upd_success button

        # update_break button
        elif call.data == 'update_break':
            bot.edit_message_text(chat_id=call.message.chat.id, \
                                message_id=call.message.message_id, \
                                text="<b>–í –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòâ</b>", \
                                parse_mode='HTML')
        # update_break button

### Callback query handler ###



# Create the timetable line
def timetable():
    return '''\r
<b>–ß–µ—Ç–≤–µ—Ä–≥:</b>
    <b>18:30</b>  -  –û–¢–ö–†–´–¢–ò–ï

<b>–ü—è—Ç–Ω–∏—Ü–∞:</b>
    <b>08:30</b>  -  –ó–ê–í–¢–†–ê–ö
    <b>09:10</b>  -  –ú–û–õ–ò–¢–í–ê
    <b>10:00</b>  -  –°–û–ë–†–ê–ù–ò–ï
    <b>12:00</b>  -  –ú–ê–°–¢–ï–† –ö–õ–ê–°–°–´
    <b>14:30</b>  -  –°–û–ë–†–ê–ù–ò–ï
    <b>16:00</b>  -  –ú–ê–õ–´–ï –ì–†–£–ü–ü–´
    <b>18:30</b>  -  –°–û–ë–†–ê–ù–ò–ï

<b>–°—É–±–±–æ—Ç–∞:</b>
    <b>08:30</b>  -  –ó–ê–í–¢–†–ê–ö
    <b>09:10</b>  -  –ú–û–õ–ò–¢–í–ê
    <b>10:00</b>  -  –°–û–ë–†–ê–ù–ò–ï
    <b>12:00</b>  -  –ú–ê–°–¢–ï–† –ö–õ–ê–°–°–´
    <b>14:30</b>  -  –°–û–ë–†–ê–ù–ò–ï
    <b>16:00</b>  -  –ú–ê–õ–´–ï –ì–†–£–ü–ü–´
    <b>19:00</b>  -  –í–ï–ß–ï–† –•–í–ê–õ–´

<b>–í–æ—Å–∫—Ä–µ—Å–µ–Ω–∏–µ:</b>
    <b>09:00</b>  -  –ú–û–õ–ò–¢–í–ê
    <b>10:00</b>  -  –°–û–ë–†–ê–ù–ò–ï
    <b>14:00</b>  -  –°–û–ë–†–ê–ù–ò–ï (–ü–æ–¥—Ä–æ—Å—Ç–∫–∏)
    <b>17:00</b>  -  –ú–û–õ–ò–¢–í–ê
    <b>18:00</b>  -  –°–û–ë–†–ê–ù–ò–ï
'''

# Create the line of events which now
def events_now():
    now = datetime.now()
    events = Events.query.filter(and_(Events.dateStart <= now, Events.dateFinish >= now))

    line = '<b>–°–µ–π—á–∞—Å:</b>\n'

    for i in events:
        if (i.name == '–ó–ê–í–¢–†–ê–ö'):
            line += '    <b>{}</b>  -  ‚òï {} <i>({})</i>\n' \
                .format(getTime(i.dateStart), i.name, i.speaker)
        elif (i.name == '–ú–û–õ–ò–¢–í–ê'):
            line += '    <b>{}</b>  -  üôè {}\n'.format(getTime(i.dateStart), i.name)
        elif (i.name == '–°–û–ë–†–ê–ù–ò–ï' or i.name == '–°–û–ë–†–ê–ù–ò–ï (–ü–æ–¥—Ä–æ—Å—Ç–∫–∏)'):
            if i.description is None:
                line += '    <b>{}</b>  -  üî• {}  ( <b>–ü—Ä–æ–ø–æ–≤–µ–¥–Ω–∏–∫:</b> <i>{}</i> )\n' \
                            .format(getTime(i.dateStart), \
                                    i.name, \
                                    i.speaker)
            else:
                line += '    <b>{}</b>  -  üî• {}  ( <b>–ü—Ä–æ–ø–æ–≤–µ–¥–Ω–∏–∫:</b> <i>{}</i> \
<b>; —Ç–µ–º–∞:</b> <i>"{}"</i> )\n'.format(getTime(i.dateStart), \
                                        i.name, \
                                        i.speaker, \
                                        i.description)
        elif (i.name == '–ú–ê–°–¢–ï–† –ö–õ–ê–°–°'):
            line += '    <b>{}</b>  -  ‚úèÔ∏è {}  ( <b>–°–ø–∏–∫–µ—Ä:</b> <i>{}</i> \
<b>; —Ç–µ–º–∞:</b> <i>"{}"</i> <b>; –ª–æ–∫–∞—Ü–∏—è:</b> <i>{}</i> )\n' \
                .format(getTime(i.dateStart), \
                        i.name, i.speaker, i.description, i.location)
        elif (i.name == '–ú–ê–õ–´–ï –ì–†–£–ü–ü–´'):
            line += '    <b>{}</b>  -  ‚òÅÔ∏è {}\n'.format(getTime(i.dateStart), i.name)
        elif (i.name == '–û–¢–ö–†–´–¢–ò–ï'):
            line += '    <b>{}</b>  -  üí£ {}\n'.format(getTime(i.dateStart), i.name)
        elif (i.name == '–í–ï–ß–ï–† –•–í–ê–õ–´'):
            line += '    <b>{}</b>  -  üî• {}\n'.format(getTime(i.dateStart), i.name)

    if (line == '<b>–°–µ–π—á–∞—Å:</b>\n'):
        line += '    –°–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è üòâ\n'

    return line

# Generate line hour:minute
def getTime(dt):
    temp = dt.timetuple()
    hour = temp[3]
    minute = temp[4]

    if hour < 10:
        hour = '0' + str(hour)
    if minute < 10:
        minute = '0' + str(minute)

    return '{}:{}'.format(hour, minute)

# grp_db_processing
def grp_db_processing(message, last_name, first_name, second_name):
    is_distributed = False
    for i in small_group_temp[0]:
        if i[0] != '':
            if (i[2] == last_name and i[3] == first_name and i[4] == second_name):
                if i[0] == '2':
                    bot.send_message(message.chat.id, \
                        '<b>–í—ã –≤–æ {} –≥—Ä—É–ø–ø–µ üòä</b>'.format(i[0]), \
                        parse_mode='HTML')
                else:
                    bot.send_message(message.chat.id, \
                        '<b>–í—ã –≤ {} –≥—Ä—É–ø–ø–µ üòä</b>'.format(i[0]), \
                        parse_mode='HTML')
                return
            
            is_distributed = True

    if is_distributed:
        bot.send_message(message.chat.id, \
                        '<b>–ú—ã –µ—â–µ –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –≤–∞—Å –≤ –º–∞–ª—É—é –≥—Ä—É–ø–ø—É, \
–ª–∏–±–æ –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤–∞—à–∏ –§–ò–û ü§î</b>\n<i>–õ–∏–±–æ –º—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ –≤–∞—à–∏ –§–ò–û</i> üòâ', \
                        parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, \
                        '<b>–ú—ã –µ—â–µ –Ω–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏–ª–∏ –º–∞–ª—ã–µ –≥—Ä—É–ø–ø—ã ü§î</b>', \
                        parse_mode='HTML')
# grp_db_processing

# Function for changing status for user
def change_status_for_user(message):
    try:
        request = message.text.split()
        user = Users.query.filter_by(username=request[0]).first()

        if (user is None):
            bot.send_message(message.chat.id, \
                '<b>–û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> {} <b>–Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (</b>' \
                    .format(request[0]), parse_mode='HTML')
        else:
            user.status = request[1]
            db.session.commit()

            bot.send_message(message.chat.id, \
                '<b>C—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b> {} <b>—Å–º–µ–Ω–µ–Ω –Ω–∞</b> {}' \
                    .format(request[0], request[1]), parse_mode='HTML')
    except Exception as e:
        bot.send_message(message, 'oooops')